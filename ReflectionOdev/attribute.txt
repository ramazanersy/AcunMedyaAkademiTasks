Attribute Nedir? 
Attribute, C#'ta sÄ±nÄ±f, metod, Ã¶zellik gibi yapÄ±lara ek bilgi (metadata) eklememizi saÄŸlayan yapÄ±lardÄ±r. Derleyiciye veya Ã§alÄ±ÅŸma zamanÄ±na bu yapÄ±larla ilgili ek anlam kazandÄ±rÄ±rlar.

 Nerelerde ve Neden KullanÄ±lÄ±r?
YÃ¶nlendirme: Kodun nasÄ±l Ã§alÄ±ÅŸacaÄŸÄ±nÄ± etkileyebilir.

UyarÄ± / DokÃ¼mantasyon: Eski kodlarÄ± [Obsolete] ile iÅŸaretleyebiliriz.

Veri doÄŸrulama: [Required], [MaxLength] gibi validation iÅŸlemleri.

SerileÅŸtirme, JSON dÃ¶nÃ¼ÅŸÃ¼mÃ¼, MVC binding vs.

GerÃ§ek Ã–rnekler:

[Obsolete]: Eski metotlar iÃ§in uyarÄ± verir.

[Required]: BoÅŸ geÃ§ilemeyen alanlarÄ± belirtir (ASP.NET model validation).

[Serializable]: Nesnenin serileÅŸtirilebileceÄŸini belirtir.

 Kendi Attributeâ€™unu NasÄ±l TanÄ±mlarsÄ±n?
csharp
Kopyala
DÃ¼zenle
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
public class DeveloperAttribute : Attribute
{
    public string Name { get; }
    public DeveloperAttribute(string name) => Name = name;
}
KullanÄ±mÄ±:

csharp
Kopyala
DÃ¼zenle
[Developer("AyÅŸe")]
public class SampleClass { }

 Bir Attribute NasÄ±l Okunur? (Reflection ile)
csharp
Kopyala
DÃ¼zenle
var attr = typeof(SampleClass)
    .GetCustomAttributes(typeof(DeveloperAttribute), false)
    .FirstOrDefault() as DeveloperAttribute;

Console.WriteLine(attr?.Name); // Ã‡Ä±ktÄ±: AyÅŸe

 Attribute ile Veri DoÄŸrulama (Validation) NasÄ±l YapÄ±lÄ±r?
ğŸ“Œ Ã–rnek:

csharp
Kopyala
DÃ¼zenle
public class User
{
    [Required]
    public string Name { get; set; }
}
ğŸ“Œ Kontrol:

csharp
Kopyala
DÃ¼zenle
var prop = typeof(User).GetProperty("Name");
bool isRequired = Attribute.IsDefined(prop, typeof(RequiredAttribute));

if (isRequired && string.IsNullOrEmpty(new User().Name))
    Console.WriteLine("Name alanÄ± boÅŸ geÃ§ilemez.");